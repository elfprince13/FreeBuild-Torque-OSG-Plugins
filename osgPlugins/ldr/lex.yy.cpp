


#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[138] =
    {   0,
        0,    0,   26,   26,   36,   34,    2,    3,    1,   33,
       34,   33,   33,    9,    8,    7,    6,    5,    4,   29,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   26,
       27,   34,   33,   34,   29,   33,   29,   31,   30,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   26,   31,   30,   34,   33,
       30,   33,   34,   33,   32,   28,   33,   33,   25,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       34,   30,   34,   32,   34,   33,   31,   33,   34,   33,
       30,   33,   33,   24,   33,   33,   33,   33,   33,   15,

       33,   10,   33,   33,   31,   34,   30,   34,   33,   30,
       14,   20,   33,   33,   11,   22,   13,   33,   18,   33,
       12,   30,   33,   23,   16,   33,   33,   33,   33,   33,
       33,   33,   33,   21,   19,   17,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    5,
        5,    1,    6,    5,    7,    8,    5,    9,   10,   11,
       12,   13,   14,   15,   15,   15,   15,    5,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   22,   23,   22,   22,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   35,   22,   22,
        5,    5,    5,    1,    5,    1,   17,   17,   17,   17,

       36,   17,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   37,
       22,   22,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[38] =
    {   0,
        1,    2,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[142] =
    {   0,
        0,    0,   35,   37,   90,    0,  508,  508,  508,   41,
       40,   55,   63,   71,   73,   74,   75,   76,   77,   78,
       98,  100,  114,   86,  115,  118,  117,   99,  126,    0,
      508,    0,   56,  147,  130,    0,  131,   23,  159,  190,
      197,  174,  128,  135,  218,  192,  219,  220,  221,  228,
      229,  175,  230,  176,  231,    0,   24,  254,  285,  295,
      110,  305,   39,   82,  157,    0,  239,  246,  177,  240,
      247,  255,  277,  287,  271,  269,  320,  321,  322,  323,
      349,  129,  359,  178,  180,  182,  232,  369,  251,  273,
      275,  324,  384,  330,  334,  331,  346,  386,  387,  332,

      385,  333,  393,  394,  335,  418,  339,  390,  395,  397,
      405,  409,  420,  406,  433,  436,  437,  439,  445,  446,
      447,  402,  449,  455,  456,  457,  463,  465,  467,  471,
      474,  475,  477,  481,  485,  487,  508,  502,   79,   57,
      505
    } ;

static yyconst flex_int16_t yy_def[142] =
    {   0,
      137,    1,  138,  138,  137,  139,  137,  137,  137,  140,
      139,  140,   12,   12,   12,   12,   12,   12,   12,   12,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  141,
      137,  139,  140,  139,   11,   13,   12,   13,   13,   13,
       13,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  141,   34,   34,   34,   13,
       39,   13,   59,   40,   40,   41,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
       59,   58,   59,   59,   81,   60,   60,   60,   83,   62,
       62,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  140,  140,   81,   81,   83,  106,   88,   88,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  106,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,    0,  137,  137,  137,
      137
    } ;

static yyconst flex_int16_t yy_nxt[546] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   10,   10,   21,   10,   22,
       23,   10,   10,   10,   24,   10,   10,   25,   26,   27,
       28,   10,   10,   29,   10,   10,   10,   31,   31,   31,
       31,   32,   60,   81,   32,   32,   32,   34,   35,   35,
       35,   35,   35,   35,   35,   32,   32,   33,   60,   81,
       32,   32,   36,   37,   37,   37,   37,   37,   37,   37,
       33,   38,   38,   38,   38,   38,   38,   38,   39,   32,
       39,   39,   39,   39,   39,   39,   32,   32,   33,  137,
       40,   32,   40,   40,   40,   40,   40,   40,   32,   32,

       32,   46,  137,   32,   32,   32,   40,   41,   40,   40,
       40,   40,   40,   40,   32,   32,  137,   32,   32,   32,
       32,   42,   32,   32,   43,   44,   32,   54,   32,   88,
       47,   32,   51,   32,   52,   32,   45,   58,   39,  137,
       32,   48,  137,   49,   50,   88,  137,   53,  106,   59,
       40,   68,  137,   69,   55,   57,   57,   57,   57,   57,
       57,   57,   32,   33,  106,   59,   40,   61,   61,   61,
       61,   61,   61,   61,   32,   32,   32,   32,   62,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   33,  137,
       77,   79,   32,   67,   62,   63,   64,   32,   65,   65,

       65,   65,   65,   65,   65,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   32,   32,
       32,   32,   71,   32,   32,   32,   32,  137,   32,   32,
       32,   32,   66,   32,   32,   32,   32,   32,   33,   32,
       32,   70,   73,   74,   32,   32,   32,   32,  137,   78,
       72,   32,   32,   80,   92,   32,   32,   32,   75,   94,
       32,   76,   82,   82,   82,   82,   82,   82,   82,   32,
      137,   32,   93,   83,   32,   95,   32,   32,   32,   33,
       32,   33,   32,  137,   96,  137,   99,   32,  100,   83,
       63,   63,   32,   84,   84,   84,   84,   84,   84,   84,

       85,   86,   97,   87,   87,   87,   87,   87,   87,   87,
       89,   90,   98,   91,   91,   91,   91,   91,   91,   91,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,  137,  101,   32,   32,   32,  103,  102,  137,
      115,   32,  111,  104,   85,   85,  114,  105,  105,  105,
      105,  105,  105,  105,   89,   89,  137,  107,  107,  107,
      107,  107,  107,  107,  108,  109,  116,  110,  110,  110,
      110,  110,  110,  110,   32,   32,   32,   32,  137,   32,
       32,   32,   32,   32,   32,   32,   32,  137,   32,   32,

       32,   33,   32,   33,  119,   32,   32,   32,   32,   32,
       32,   32,  112,  121,   32,  113,  117,  118,  137,  137,
       32,  137,  120,  108,  108,   32,  122,  122,  122,  122,
      122,  122,  122,   32,  123,  137,   32,   32,   32,   32,
      124,   32,   32,  137,   32,   32,   32,   32,  112,   32,
       32,   32,   32,  137,   32,   32,   32,   32,  125,  137,
       32,   32,   32,   32,  128,   32,  126,   32,   32,  127,
       32,   32,   32,  137,   32,   32,   32,   32,  130,   32,
       32,   32,   32,  129,  137,   32,   32,   32,  137,  131,
       32,  137,   32,  134,  137,  132,  136,  137,  137,  135,

      137,  133,   30,   30,   30,   56,   56,    5,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137
    } ;

static yyconst flex_int16_t yy_chk[546] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,   10,   38,   57,   63,   63,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   33,  140,   38,   57,
       12,   33,   12,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   14,  139,
       15,   16,   17,   18,   19,   20,   24,   64,   64,    5,
       14,   24,   15,   16,   17,   18,   19,   20,   21,   28,

       22,   24,    0,   21,   28,   22,   14,   14,   15,   16,
       17,   18,   19,   20,   23,   25,    0,   27,   26,   23,
       25,   21,   27,   26,   21,   22,   29,   28,   43,   61,
       25,   29,   27,   43,   27,   44,   23,   35,   37,    0,
       44,   25,    0,   25,   26,   61,    0,   27,   82,   35,
       37,   43,    0,   44,   29,   34,   34,   34,   34,   34,
       34,   34,   65,   65,   82,   35,   37,   39,   39,   39,
       39,   39,   39,   39,   42,   52,   54,   69,   39,   42,
       52,   54,   69,   84,   84,   85,   85,   86,   86,    0,
       52,   54,   46,   42,   39,   40,   40,   46,   40,   40,

       40,   40,   40,   40,   40,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   45,   47,
       48,   49,   46,   45,   47,   48,   49,    0,   50,   51,
       53,   55,   41,   50,   51,   53,   55,   87,   87,   67,
       70,   45,   48,   49,   67,   70,   68,   71,    0,   53,
       47,   68,   71,   55,   67,   72,   89,   89,   50,   70,
       72,   51,   58,   58,   58,   58,   58,   58,   58,   76,
        0,   75,   68,   58,   76,   71,   75,   73,   90,   90,
       91,   91,   73,    0,   72,    0,   75,   74,   76,   58,
       59,   59,   74,   59,   59,   59,   59,   59,   59,   59,

       60,   60,   73,   60,   60,   60,   60,   60,   60,   60,
       62,   62,   74,   62,   62,   62,   62,   62,   62,   62,
       77,   78,   79,   80,   92,   77,   78,   79,   80,   92,
       94,   96,  100,  102,   95,   94,   96,  100,  102,   95,
      105,  105,    0,   77,  107,  107,   97,   79,   78,    0,
       96,   97,   92,   80,   81,   81,   95,   81,   81,   81,
       81,   81,   81,   81,   83,   83,    0,   83,   83,   83,
       83,   83,   83,   83,   88,   88,   97,   88,   88,   88,
       88,   88,   88,   88,   93,  101,   98,   99,    0,   93,
      101,   98,   99,  103,  104,  108,  108,    0,  103,  104,

      109,  109,  110,  110,  101,  111,  114,  122,  122,  112,
      111,  114,   93,  104,  112,   93,   98,   99,    0,    0,
      113,    0,  103,  106,  106,  113,  106,  106,  106,  106,
      106,  106,  106,  115,  112,    0,  116,  117,  115,  118,
      114,  116,  117,    0,  118,  119,  120,  121,  113,  123,
      119,  120,  121,    0,  123,  124,  125,  126,  118,    0,
      124,  125,  126,  127,  123,  128,  120,  129,  127,  120,
      128,  130,  129,    0,  131,  132,  130,  133,  127,  131,
      132,  134,  133,  126,    0,  135,  134,  136,    0,  128,
      135,    0,  136,  131,    0,  129,  133,    0,    0,  132,

        0,  130,  138,  138,  138,  141,  141,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[36] =
    {   0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
	
	/*
	 * Lex syntax for LDRAW command files.
	 *
	 * You must manually add #include <stdlib.h> to beginning of 
	 * lex.yy.c (right after the #include <stdio.h>), which is
	 * produced from this file via flex.  Otherwise, routines using
	 * atof() will get garbage numbers.
	 *
	 * Used with express permission of Paul Gyugyi under the following terms:
	 *		I hearby grant you an unrestricted license to do whatever you like with the code,
	 *		specifically to include it in a closed source application and/or modify it as
	 *		you see fit.
	 *
	 */
	
	/* This C file is generated by the
	 *	 program flex from ldlite.l. At the end are some important
	 *	 routines for handling include files. The code is mostly taken
	 *	 from the flex man page, in the section describing how to do
	 *	 include files. If you regenerate this file using lex, you will
	 *	 need to make two edits. Make sure stdlib.h is included right
	 *	 after stdio.h at the beginning of lex.yy.c. Also, change the
	 *	 definition of automatically created yylex() to be called
	 *	 my_yylex(). At the end of the file is a funtion called yylex()
	 *	 which is faster than the standard one, since it caches previous
	 *	 token streams. The code makes use of some flex-specific features,
	 *	 so a standard lex program won't work.
	 */
	
#include <stdio.h>
#include "ldraw.h"
	
	using namespace LDParse;
	
#define YY_NEVER_INTERACTIVE 1
	YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
	
#if defined( _DEBUG    ) || defined( DEBUG )
#define FLEX_DEBUG 1
#else
#define FLEX_DEBUG 0
#endif
#define YY_NO_UNISTD_H
	
	// Hack to make windows lex happy.
#ifndef isatty
	inline int isatty(int) { return 0; }
#endif
	
#define INITIAL 0
#define STRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int my_yylex (void);

#define YY_DECL int my_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 138 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 508 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN(STRING); }
	YY_BREAK
case 2:
YY_RULE_SETUP
;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{yylval.c = "EOL"; return tEOL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{yylval.i = atoi(yytext); return tFIVE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{yylval.i = atoi(yytext); return tFOUR;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{yylval.i = atoi(yytext); return tTHREE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{yylval.i = atoi(yytext); return tTWO;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{yylval.i = atoi(yytext); return tONE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
{yylval.i = atoi(yytext); return tZERO;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{yylval.c = "STEP"; return tSTEP;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{yylval.c = "PAUSE"; return tPAUSE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{yylval.c = "WRITE"; return tWRITE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{yylval.c = "PRINT"; return tWRITE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{yylval.c = "CLEAR"; return tCLEAR;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{yylval.c = "SAVE"; return tSAVE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
{yylval.c = "ROTATE"; return tROTATE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
{yylval.c = "TRANSLATE"; return tTRANSLATE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{yylval.c = "SCALE"; return tSCALE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{yylval.c = "TRANSFORM"; return tTRANSFORM;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{yylval.c = "COLOR"; return tCOLOR;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{yylval.c = "COLORNAME"; return tALIAS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{yylval.c = "POINT"; return tPOINT;}  
	YY_BREAK
case 23:
YY_RULE_SETUP
{yylval.c = "MATRIX"; return tMATRIX;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{yylval.c = "FILE"; return tFILE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{yylval.c = "END"; return tEND;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ 
	/* eat the string */
	yylval.c = dStrdup(yytext); return tIDENT;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ BEGIN(INITIAL); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
		 S32 a;
		 a = 0;
		 sscanf(yytext,"%i",&a);
		 yylval.i = a; 
		 return tINT;
		 }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
		 S32 a;
		 a = 0;
		 a = atoi(yytext);
		 yylval.i = a; 
		 return tINT;
		 }
	YY_BREAK
case 30:
case 31:
case 32:
YY_RULE_SETUP
{
		 yylval.d = atof(yytext);
		 return tFLOAT;
		 }
	YY_BREAK
case 33:
YY_RULE_SETUP
{yylval.c = dStrdup(yytext); return tIDENT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
{yylval.c = dStrdup(yytext); return tGARBAGE;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
{
	yylval.c = "EOF";
	return tEOF;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 138 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 138 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 137);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

S32 LDParse::start_include_file(char *root_name)
{
	//static char filename[256];
	//char fixed_root_name[256];
	
	char * fbuf = NULL;
	
	S32 ftype=0;
	CACHED_STREAM *found_it;
	
	AssertFatal(include_stack_ptr < (MAX_INCLUDE_DEPTH-1), "Includes nested too deeply" );
	// look up to see if file is in cache.
	{
		S32 i;
		
		found_it = NULL;
		for(i=0; i<cached_file_stack_index; i++) {
			switch (cached_streams[i].valid) {
				case CHS_UNUSED:
					break;
				case CHS_PROBLEM:
				case CHS_FILLING:
				case CHS_FILLED:
					if(!osgDB::equalCaseInsensitive(root_name,cached_streams[i].filename)) {
						found_it = &(cached_streams[i]);
					}
					break;
			}
		}		  
	}
	
	if ((found_it) && (found_it->valid == CHS_FILLED)) {
		// we can replay the cached file
		include_stack_ptr++;
		cached_file_stack[include_stack_ptr] = found_it;
		found_it->next_token_index = 0;
		//current_type[include_stack_ptr] = found_it->ftype;
		return 0;
	} else {
		// read it from the file system
		fbuf = LDParse::bufferFile(LDParse::findLDrawFile(root_name));
		if(fbuf) {
			include_stack_ptr++;
			
			//fp_stack[include_stack_ptr] = fp;
			include_stack[include_stack_ptr] = YY_CURRENT_BUFFER;
			//yyin = fp;
			//yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE ) );
			/*yy_switch_to_buffer(*/yy_scan_buffer(fbuf,strlen(fbuf) + 2)/*)*/;
			//current_type[include_stack_ptr] = ftype;
			// if entry in cache is not marked bad, cache this file
			if (((ftype == TYPE_P) || (ftype == TYPE_PART))
				&& (found_it == NULL)) {
				CACHED_STREAM *chs = NULL;
				
				// find an unused place to store this cached file
				if (cached_file_stack_index < MAX_CACHED_FILES) {
					chs = &(cached_streams[cached_file_stack_index]);
					chs->valid = CHS_FILLING;
					strcpy(chs->filename, root_name);
					chs->ftype = ftype;
					chs->next_token_index = 0;
					// malloc here
					chs->tokens.resize(MAX_CACHED_TOKENS);
					if (chs->tokens.size() != MAX_CACHED_TOKENS) {
					    chs->valid = CHS_PROBLEM;
					} else {
					    chs->values.resize(MAX_CACHED_TOKENS);
						if (chs->values.size() != MAX_CACHED_TOKENS) {
							chs->tokens.clear();
							chs->valid = CHS_PROBLEM;
						} else {
							cached_file_stack_index++;
							chs->max_tokens = MAX_CACHED_TOKENS;
						}
					}
				}
				// save name and type
				// set entry in stack so yylex stores the tokens
				cached_file_stack[include_stack_ptr] = chs;
#if defined( _DEBUG    ) || defined( DEBUG )
				if (chs != NULL) {
					std::cout << "Caching file "<< root_name <<" in slot " << (cached_file_stack_index-1) << std::endl;
				} else {
					std::cout << "No room to cache file " << root_name << std::endl;
				}
#endif
			} else {
				// do not cache this file
				cached_file_stack[include_stack_ptr] = NULL;
			}
			return 0;
		} else {
			return -1;
		}
	}
}

S32 LDParse::defer_stop_include_file(void)
{
	static S32 init=0;
	S32 i;
	if(!init) {
		init = 1;
		for(i=0; i<MAX_INCLUDE_DEPTH; i++) {
			deferred_flag[i] = 0;
		}
	}
	deferred_flag[include_stack_ptr-1] = 1;
	return 0;
}

S32 LDParse::stop_include_file(void)
{
	if ( include_stack_ptr > 0 ) {	
		if ((cached_file_stack[include_stack_ptr] != NULL) &&
			(cached_file_stack[include_stack_ptr]->valid == CHS_FILLED)) {
			// we were working from cache, so do not close or delete any yy_stuff
			cached_file_stack[include_stack_ptr] = NULL;
			ldlite_profile.cache_hits++;
		} else {
			if ((cached_file_stack[include_stack_ptr] != NULL) &&
				(cached_file_stack[include_stack_ptr]->valid == CHS_FILLING)) {
				cached_file_stack[include_stack_ptr]->valid = CHS_FILLED;
				ldlite_profile.cached_files++;
#if defined( _DEBUG    ) || defined( DEBUG )
				std::cout << "Cached " << cached_file_stack[include_stack_ptr]->filename <<", used "<<cached_file_stack[include_stack_ptr]->next_token_index) <<" tokens" << std::endl;
				
#endif
			} else {
				ldlite_profile.uncached_files++;
			}
			cached_file_stack[include_stack_ptr] = NULL;
			yy_delete_buffer(YY_CURRENT_BUFFER );
			yy_switch_to_buffer(include_stack[include_stack_ptr] );
			//fclose(fp_stack[include_stack_ptr]);
		}
		/* free transform matrix and translation vector */
		pop_transform();
		/* free zcolor table */
		znamelist_pop();
		
		deferred_flag[include_stack_ptr] = 0;
		/*if (current_type[include_stack_ptr] >= zDetailLevel) {
		 zStep(-1,0);
		 }*/
		include_stack_ptr--;
		if (deferred_flag[include_stack_ptr] != 0) {
			return stop_include_file();
		} else {
			return include_stack_ptr;
		}
	} else {
		/* free transform matrix and translation vector */
		pop_transform();
		/* free zcolor table */
		znamelist_pop();
		//	  yy_delete_buffer(YY_CURRENT_BUFFER );
#if defined( _DEBUG    ) || defined( DEBUG )
		std::cout	<< "Profile: " << ldlite_profile.cached_files
		<< " cached, " << ldlite_profile.uncached_files
		<< " uncached, " << ldlite_profile.cache_hits
		<< " hits" << std::endl;
#endif
		return (-1);
	}
}

void stop_caching()
{
	
	if (cached_file_stack[include_stack_ptr] != NULL) {
		if (cached_file_stack[include_stack_ptr]->valid == CHS_FILLING) {
			cached_file_stack[include_stack_ptr]->valid = CHS_PROBLEM;
		}
	}
	return;
}

S32 is_current_file_not_cached()
{
	
	if (cached_file_stack[include_stack_ptr] == NULL) {
		return 1;
	} else {
		if (cached_file_stack[include_stack_ptr]->valid == CHS_PROBLEM) {
			return 1;
		} else {
			return 0;
		}
	}
}

// TBD: This function probably has memory leaks.
S32 LDParse::cache_mpd_subfiles(char *mpd_subfile_name)
{
	// keep stack space light, because this is a recursive function,
	// called for each 0 FILE line in the file.
	CACHED_STREAM *chs = NULL;
	S32 rc;
	S32 state;
	
	// if this file is already cached, return
	// look up to see if file is in cache.
	{
		S32 i;
		
#if defined( _DEBUG    ) || defined( DEBUG )
		std::cout << "caching MPD file " << mpd_subfile_name << std::endl << std::endl;
#endif
		
		for(i=0; i<cached_file_stack_index; i++) {
			switch (cached_streams[i].valid) {
				case CHS_UNUSED:
					break;
				case CHS_PROBLEM:
				case CHS_FILLING:
					if(osgDB::equalCaseInsensitive(mpd_subfile_name,cached_streams[i].filename)) {
						return(-1);
					}
					break;
				case CHS_FILLED:
					if(osgDB::equalCaseInsensitive(mpd_subfile_name,cached_streams[i].filename)) {
						return(0);
					}
					break;
			}
		}		  
	}
	
	// find an unused place to store this cached file
	if (cached_file_stack_index >= MAX_CACHED_FILES) {
#if defined( _DEBUG    ) || defined( DEBUG )
		std::cout << "Not caching MPD subfile "<<mpd_subfile_name<<", too many files already cached."<<std::endl;
#endif
		return(-1);
	}
	chs = &(cached_streams[cached_file_stack_index]);
	chs->valid = CHS_FILLING;
	strcpy(chs->filename, mpd_subfile_name);
	chs->ftype = TYPE_PART;  // treat it like a part for purposes of screen updates
	chs->next_token_index = 0;
	// malloc here
	//chs->tokens =  (S32 *)dMalloc(MAX_CACHED_TOKENS*sizeof(S32));
	chs->tokens.resize(MAX_CACHED_TOKENS);
	if (chs->tokens.size() != MAX_CACHED_TOKENS) {
#if defined( _DEBUG    ) || defined( DEBUG )
		std::cerr << "Not caching MPD subfile "<<mpd_subfile_name<< ", out of memory (1)."<<std::endl;
#endif
		return (-1);
	}
	//chs->values = (YYSTYPE *)dMalloc(MAX_CACHED_TOKENS*sizeof(YYSTYPE));
	chs->values.resize(MAX_CACHED_TOKENS);
	if (chs->values.size() != MAX_CACHED_TOKENS) {
		//dFree(chs->tokens);
		chs->tokens.clear();
#if defined( _DEBUG    ) || defined( DEBUG )
		std::cerr << "Not caching MPD subfile "<<mpd_subfile_name<<", out of memory (2)."<<std::endl;
#endif
		return (-1);
	}
	chs->max_tokens = MAX_CACHED_TOKENS;
	cached_file_stack_index++;
	
#if defined( _DEBUG    ) || defined( DEBUG )
	std::cout << "Caching MPD subfile " << mpd_subfile_name<<std::endl;
#endif
	state = 0;
	while (1) {
		rc = my_yylex();
		if (rc == tEOF) {
			chs->tokens[chs->next_token_index] = rc;
			chs->values[chs->next_token_index] = yylval;
			chs->next_token_index++;
			if (chs->valid == CHS_FILLING) {
				chs->valid = CHS_FILLED;
#if defined( _DEBUG    ) || defined( DEBUG )
				std::cout << "Cached " << chs->filename << ", used "<<chs->next_token_index<<" tokens"<<std::endl;
#endif
			}
			return(0);
		} else {
			if (chs->next_token_index >= (chs->max_tokens-1)) {  /* leave room for EOF */
#if 0
				/* TBD: realloc */
				stop_caching();
#if defined( _DEBUG    ) || defined( DEBUG )
				std::cout << "MPD subfile " << chs->filename <<" is too large to cache"<<std::endl;
#endif
#else
				//chs->tokens = (S32 *)dRealloc(chs->tokens, 2*chs->max_tokens*sizeof(S32));
				//chs->values = (YYSTYPE *)dRealloc(chs->values, 2*chs->max_tokens*sizeof(YYSTYPE));
				chs->tokens.resize(chs->max_tokens * 2);
				chs->values.resize(chs->max_tokens * 2);
				chs->max_tokens = 2*chs->max_tokens;
				if ((chs->tokens.size() != chs->max_tokens) || (chs->values.size() != chs->max_tokens))
				{
					stop_caching();
#if defined( _DEBUG    ) || defined( DEBUG )
					std::cerr << "MPD subfile %s is too large to cache " << chs->filename << std::endl;
#endif
				} else {
#if defined( _DEBUG    ) || defined( DEBUG )
					std::cout << "MPD subfile "<< chs->filename << " is large, increasing cache to "
					<<chs->max_tokens << " tokens"<<std::endl;
#endif
				}
				
#endif
			} else {
				chs->tokens[chs->next_token_index] = rc;
				chs->values[chs->next_token_index] = yylval;
				chs->next_token_index++;
			}
			switch (state) {
				case 0:
					if (rc == tZERO) {
						state = 1;
					}
					break;
				case 1:
					if (rc == tFILE) {
						state = 2;
					} else {
						state = 0;
					}
					break;
				case 2:
					if (rc = tIDENT) {
						if (chs->valid == CHS_FILLING) {
							// remove "0 FILE name" from this stream...
							chs->next_token_index -= 3;
							// and insert an EOF character
							chs->tokens[chs->next_token_index] = tEOF;
							chs->values[chs->next_token_index].c  = "EOF";
							chs->next_token_index++;
							//
							chs->valid = CHS_FILLED;
#if defined( _DEBUG    ) || defined( DEBUG )
							std::cout << "Cached "<<chs->filename<<", used "<<chs->next_token_index<<" tokens"<<std::endl;
#endif
						}
						return cache_mpd_subfiles(yylval.c);
					} else {
						state = 0;
					}
					break;
			}
#if 0 /* not needed ? */
			if (chs->next_token_index >= chs->max_tokens) {
				/* TBD: realloc */
				stop_caching();
#if defined( _DEBUG    ) || defined( DEBUG )
				std::cerr << "MPD subfile %s is too large to cache " << chs->filename << std::endl;
#endif
			}
#endif
		}
	}
}

S32 LDParse::yylex(void)
{
	static S32 init=0;
	S32 rc;
	
	if(!init) {
		S32 i;
		
		init=1;
		include_stack_ptr = 0;
		for (i=0; i<MAX_INCLUDE_DEPTH; i++) {
			cached_file_stack[i] = NULL;
		}
		for (i=0; i<MAX_CACHED_FILES; i++) {
			cached_streams[i].valid = CHS_UNUSED;
		}
		ldlite_profile.cached_files=0;
		ldlite_profile.uncached_files=0;
		ldlite_profile.cache_hits=0;
	}
	
	if (cached_file_stack[include_stack_ptr] == NULL) {
		// top level .dat file (or caching disabled), do not cache
		return my_yylex();
	} else {
		CACHED_STREAM *chs;
		// we are inside an included file.  Either it is being cached or has already been cached
		chs = cached_file_stack[include_stack_ptr];
		switch(chs->valid) {
			case CHS_UNUSED:
			case CHS_PROBLEM:
				// error condition?
				return my_yylex();
				break;
			case CHS_FILLING:
				rc = my_yylex();
				chs->tokens[chs->next_token_index] = rc;
				chs->values[chs->next_token_index] = yylval;
				chs->next_token_index++;
				if (chs->next_token_index >= chs->max_tokens) {
					/* TBD: realloc */
					stop_caching();
#if defined( _DEBUG    ) || defined( DEBUG )
					std::cerr << "File %s is too large to cache " << chs->filename << std::endl;
#endif
				}
				return rc;
				break;
			case CHS_FILLED:
				rc = chs->tokens[chs->next_token_index];
				yylval = chs->values[chs->next_token_index];
				chs->next_token_index++;
				return rc;
				break;
		}
	}
}

S32 LDParse::initParse(const char* filename){
	
	zcolor_init();
	transform_stack_ptr = 0;
	include_stack_ptr = 0;
	current_transform[transform_stack_ptr] = savemat(0.0,0.0,0.0, 1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);
	
	char * fbuf = LDParse::bufferFile(LDParse::findLDrawFile(filename));
	if(fbuf) {
		
		YY_BUFFER_STATE mbs = yy_scan_buffer(fbuf,strlen(fbuf) + 2);
		S32 my_parse_result  = LDyyparse ();
		yy_delete_buffer (mbs);
		return my_parse_result;
		
	}
	return -1;
}

